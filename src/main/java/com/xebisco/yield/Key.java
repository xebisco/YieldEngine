/*
 * Copyright [2022] [Xebisco]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.xebisco.yield;

/**
 * This class contains all the mapped keys that can be used in a game.
 * @since 4_1.1
 * @author Xebisco
 */
public class Key
{
    public static final int ENTER = '\n';
    public static final int BACK_SPACE = '\b';
    public static final int TAB = '\t';
    public static final int CANCEL = 0x03;
    public static final int CLEAR = 0x0C;
    public static final int SHIFT = 0x10;
    public static final int CONTROL = 0x11;
    public static final int ALT = 0x12;
    public static final int PAUSE = 0x13;
    public static final int CAPS_LOCK = 0x14;
    public static final int ESCAPE = 0x1B;
    public static final int SPACE = 0x20;
    public static final int PAGE_UP = 0x21;
    public static final int PAGE_DOWN = 0x22;
    public static final int END = 0x23;
    public static final int HOME = 0x24;
    public static final int LEFT = 0x25;
    public static final int UP = 0x26;
    public static final int RIGHT = 0x27;
    public static final int DOWN = 0x28;
    public static final int COMMA = 0x2C;
    public static final int MINUS = 0x2D;
    public static final int PERIOD = 0x2E;
    public static final int SLASH = 0x2F;
    public static final int NUMBER_0 = 0x30;
    public static final int NUMBER_1 = 0x31;
    public static final int NUMBER_2 = 0x32;
    public static final int NUMBER_3 = 0x33;
    public static final int NUMBER_4 = 0x34;
    public static final int NUMBER_5 = 0x35;
    public static final int NUMBER_6 = 0x36;
    public static final int NUMBER_7 = 0x37;
    public static final int NUMBER_8 = 0x38;
    public static final int NUMBER_9 = 0x39;
    public static final int SEMICOLON = 0x3B;
    public static final int EQUALS = 0x3D;
    public static final int A = 0x41;
    public static final int B = 0x42;
    public static final int C = 0x43;
    public static final int D = 0x44;
    public static final int E = 0x45;
    public static final int F = 0x46;
    public static final int G = 0x47;
    public static final int H = 0x48;
    public static final int I = 0x49;
    public static final int J = 0x4A;
    public static final int K = 0x4B;
    public static final int L = 0x4C;
    public static final int M = 0x4D;
    public static final int N = 0x4E;
    public static final int O = 0x4F;
    public static final int P = 0x50;
    public static final int Q = 0x51;
    public static final int R = 0x52;
    public static final int S = 0x53;
    public static final int T = 0x54;
    public static final int U = 0x55;
    public static final int V = 0x56;
    public static final int W = 0x57;
    public static final int X = 0x58;
    public static final int Y = 0x59;
    public static final int Z = 0x5A;
    public static final int OPEN_BRACKET = 0x5B;
    public static final int BACK_SLASH = 0x5C;
    public static final int CLOSE_BRACKET = 0x5D;
    public static final int NUMPAD0 = 0x60;
    public static final int NUMPAD1 = 0x61;
    public static final int NUMPAD2 = 0x62;
    public static final int NUMPAD3 = 0x63;
    public static final int NUMPAD4 = 0x64;
    public static final int NUMPAD5 = 0x65;
    public static final int NUMPAD6 = 0x66;
    public static final int NUMPAD7 = 0x67;
    public static final int NUMPAD8 = 0x68;
    public static final int NUMPAD9 = 0x69;
    public static final int MULTIPLY = 0x6A;
    public static final int ADD = 0x6B;
    public static final int SEPARATOR = 0x6C;
    public static final int SUBTRACT = 0x6D;
    public static final int DECIMAL = 0x6E;
    public static final int DIVIDE = 0x6F;
    public static final int DELETE = 0x7F;
    public static final int NUM_LOCK = 0x90;
    public static final int SCROLL_LOCK = 0x91;
    public static final int F1 = 0x70;
    public static final int F2 = 0x71;
    public static final int F3 = 0x72;
    public static final int F4 = 0x73;
    public static final int F5 = 0x74;
    public static final int F6 = 0x75;
    public static final int F7 = 0x76;
    public static final int F8 = 0x77;
    public static final int F9 = 0x78;
    public static final int F10 = 0x79;
    public static final int F11 = 0x7A;
    public static final int F12 = 0x7B;
    public static final int F13 = 0xF000;
    public static final int F14 = 0xF001;
    public static final int F15 = 0xF002;
    public static final int F16 = 0xF003;
    public static final int F17 = 0xF004;
    public static final int F18 = 0xF005;
    public static final int F19 = 0xF006;
    public static final int F20 = 0xF007;
    public static final int F21 = 0xF008;
    public static final int F22 = 0xF009;
    public static final int F23 = 0xF00A;
    public static final int F24 = 0xF00B;
    public static final int PRINTSCREEN = 0x9A;
    public static final int INSERT = 0x9B;
    public static final int HELP = 0x9C;
    public static final int META = 0x9D;
    public static final int BACK_QUOTE = 0xC0;
    public static final int QUOTE = 0xDE;
    public static final int KP_UP = 0xE0;
    public static final int KP_DOWN = 0xE1;
    public static final int KP_LEFT = 0xE2;
    public static final int KP_RIGHT = 0xE3;
    public static final int DEAD_GRAVE = 0x80;
    public static final int DEAD_ACUTE = 0x81;
    public static final int DEAD_CIRCUMFLEX = 0x82;
    public static final int DEAD_TILDE = 0x83;
    public static final int DEAD_MACRON = 0x84;
    public static final int DEAD_BREVE = 0x85;
    public static final int DEAD_ABOVEDOT = 0x86;
    public static final int DEAD_DIAERESIS = 0x87;
    public static final int DEAD_ABOVERING = 0x88;
    public static final int DEAD_DOUBLEACUTE = 0x89;
    public static final int DEAD_CARON = 0x8a;
    public static final int DEAD_CEDILLA = 0x8b;
    public static final int DEAD_OGONEK = 0x8c;
    public static final int DEAD_IOTA = 0x8d;
    public static final int DEAD_VOICED_SOUND = 0x8e;
    public static final int DEAD_SEMIVOICED_SOUND = 0x8f;
    public static final int AMPERSAND = 0x96;
    public static final int ASTERISK = 0x97;
    public static final int QUOTEDBL = 0x98;
    public static final int LESS = 0x99;
    public static final int GREATER = 0xa0;
    public static final int BRACELEFT = 0xa1;
    public static final int BRACERIGHT = 0xa2;
    public static final int AT = 0x0200;
    public static final int COLON = 0x0201;
    public static final int CIRCUMFLEX = 0x0202;
    public static final int DOLLAR = 0x0203;
    public static final int EURO_SIGN = 0x0204;
    public static final int EXCLAMATION_MARK = 0x0205;
    public static final int INVERTED_EXCLAMATION_MARK = 0x0206;
    public static final int LEFT_PARENTHESIS = 0x0207;
    public static final int NUMBER_SIGN = 0x0208;
    public static final int PLUS = 0x0209;
    public static final int RIGHT_PARENTHESIS = 0x020A;
    public static final int UNDERSCORE = 0x020B;
    public static final int WINDOWS = 0x020C;
    public static final int CONTEXT_MENU = 0x020D;
    public static final int FINAL = 0x0018;
    public static final int CONVERT = 0x001C;
    public static final int NONCONVERT = 0x001D;
    public static final int ACCEPT = 0x001E;
    public static final int MODECHANGE = 0x001F;
    public static final int KANA = 0x0015;
    public static final int KANJI = 0x0019;
    public static final int ALPHANUMERIC = 0x00F0;
    public static final int KATAKANA = 0x00F1;
    public static final int HIRAGANA = 0x00F2;
    public static final int FULL_WIDTH = 0x00F3;
    public static final int HALF_WIDTH = 0x00F4;
    public static final int ROMAN_CHARACTERS = 0x00F5;
    public static final int ALL_CANDIDATES = 0x0100;
    public static final int PREVIOUS_CANDIDATE = 0x0101;
    public static final int CODE_INPUT = 0x0102;
    public static final int JAPANESE_KATAKANA = 0x0103;
    public static final int JAPANESE_HIRAGANA = 0x0104;
    public static final int JAPANESE_ROMAN = 0x0105;
    public static final int KANA_LOCK = 0x0106;
    public static final int INPUT_METHOD_ON_OFF = 0x0107;
    public static final int CUT = 0xFFD1;
    public static final int COPY = 0xFFCD;
    public static final int PASTE = 0xFFCF;
    public static final int UNDO = 0xFFCB;
    public static final int AGAIN = 0xFFC9;
    public static final int FIND = 0xFFD0;
    public static final int PROPS = 0xFFCA;
    public static final int STOP = 0xFFC8;
    public static final int COMPOSE = 0xFF20;
    public static final int ALT_GRAPH = 0xFF7E;
    public static final int BEGIN = 0xFF58;
    public static final int UNDEFINED = 0x0;
    public static final char CHAR_UNDEFINED = 0xFFFF;

    /*
    public static int toKey(int i) {
        if(i == Input.KEY_0) return NUMBER_0;
        else if(i == Input.KEY_1) return NUMBER_1;
        else if(i == Input.KEY_2) return NUMBER_2;
        else if(i == Input.KEY_3) return NUMBER_3;
        else if(i == Input.KEY_4) return NUMBER_4;
        else if(i == Input.KEY_5) return NUMBER_5;
        else if(i == Input.KEY_6) return NUMBER_6;
        else if(i == Input.KEY_7) return NUMBER_7;
        else if(i == Input.KEY_8) return NUMBER_8;
        else if(i == Input.KEY_9) return NUMBER_9;
        else if(i == Input.KEY_ESCAPE) return ESCAPE;
        else if(i == Input.KEY_MINUS) return MINUS;
        else if(i == Input.KEY_EQUALS) return EQUALS;
        else if(i == Input.KEY_BACK) return BACK_SPACE;
        else if(i == Input.KEY_TAB) return TAB;
        else if(i == Input.KEY_Q) return Q;
        else if(i == Input.KEY_W) return W;
        else if(i == Input.KEY_E) return E;
        else if(i == Input.KEY_R) return R;
        else if(i == Input.KEY_T) return T;
        else if(i == Input.KEY_Y) return Y;
        else if(i == Input.KEY_U) return U;
        else if(i == Input.KEY_I) return I;
        else if(i == Input.KEY_O) return O;
        else if(i == Input.KEY_P) return P;
        else if(i == Input.KEY_A) return A;
        else if(i == Input.KEY_S) return S;
        else if(i == Input.KEY_D) return D;
        else if(i == Input.KEY_F) return F;
        else if(i == Input.KEY_G) return G;
        else if(i == Input.KEY_H) return H;
        else if(i == Input.KEY_J) return J;
        else if(i == Input.KEY_K) return K;
        else if(i == Input.KEY_L) return L;
        else if(i == Input.KEY_Z) return Z;
        else if(i == Input.KEY_X) return X;
        else if(i == Input.KEY_C) return C;
        else if(i == Input.KEY_V) return V;
        else if(i == Input.KEY_B) return B;
        else if(i == Input.KEY_N) return N;
        else if(i == Input.KEY_M) return M;
        else if(i == Input.KEY_ENTER) return ENTER;
        else if(i == Input.KEY_LBRACKET) return OPEN_BRACKET;
        else if(i == Input.KEY_RBRACKET) return CLOSE_BRACKET;
        else if(i == Input.KEY_LCONTROL) return CONTROL;
        else if(i == Input.KEY_SEMICOLON) return SEMICOLON;
        else if(i == Input.KEY_APOSTROPHE) return QUOTE;
        else if(i == Input.KEY_LSHIFT) return SHIFT;
        else if(i == Input.KEY_BACKSLASH) return BACK_SLASH;
        else if(i == Input.KEY_COMMA) return COMMA;
        else if(i == Input.KEY_PERIOD) return PERIOD;
        else if(i == Input.KEY_SLASH) return SLASH;
        else if(i == Input.KEY_RSHIFT) return SHIFT;
        else if(i == Input.KEY_MULTIPLY) return MULTIPLY;
        else if(i == Input.KEY_LMENU) return ALT;
        else if(i == Input.KEY_SPACE) return SPACE;
        else if(i == Input.KEY_CAPITAL) return CONTROL;
        else if(i == Input.KEY_F1) return F1;
        else if(i == Input.KEY_F2) return F2;
        else if(i == Input.KEY_F3) return F3;
        else if(i == Input.KEY_F4) return F4;
        else if(i == Input.KEY_F5) return F5;
        else if(i == Input.KEY_F6) return F6;
        else if(i == Input.KEY_F7) return F7;
        else if(i == Input.KEY_F8) return F8;
        else if(i == Input.KEY_F9) return F9;
        else if(i == Input.KEY_F10) return F10;
        else if(i == Input.KEY_F11) return F11;
        else if(i == Input.KEY_F12) return F12;
        else if(i == Input.KEY_F13) return F13;
        else if(i == Input.KEY_F14) return F14;
        else if(i == Input.KEY_F15) return F15;
        else if(i == Input.KEY_NUMLOCK) return NUM_LOCK;
        else if(i == Input.KEY_SCROLL) return SCROLL_LOCK;
        else if(i == Input.KEY_NUMPAD0) return NUMPAD0;
        else if(i == Input.KEY_NUMPAD1) return NUMPAD1;
        else if(i == Input.KEY_NUMPAD2) return NUMPAD2;
        else if(i == Input.KEY_NUMPAD3) return NUMPAD3;
        else if(i == Input.KEY_NUMPAD4) return NUMPAD4;
        else if(i == Input.KEY_NUMPAD5) return NUMPAD5;
        else if(i == Input.KEY_NUMPAD6) return NUMPAD6;
        else if(i == Input.KEY_NUMPAD7) return NUMPAD7;
        else if(i == Input.KEY_NUMPAD8) return NUMPAD8;
        else if(i == Input.KEY_NUMPAD9) return NUMPAD9;
        else if(i == Input.KEY_ADD) return ADD;
        else if(i == Input.KEY_SUBTRACT) return SUBTRACT;
        else if(i == Input.KEY_DECIMAL) return DECIMAL;
        else if(i == Input.KEY_KANA) return KANA;
        else if(i == Input.KEY_CONVERT) return CONVERT;
        else if(i == Input.KEY_NOCONVERT) return NONCONVERT;
        else if(i == Input.KEY_NUMPADEQUALS) return EQUALS;
        else if(i == Input.KEY_CIRCUMFLEX) return CIRCUMFLEX;
        else if(i == Input.KEY_AT) return AT;
        else if(i == Input.KEY_COLON) return COLON;
        else if(i == Input.KEY_UNDERLINE) return UNDERSCORE;
        else if(i == Input.KEY_KANJI) return KANJI;
        else if(i == Input.KEY_STOP) return STOP;
        else if(i == Input.KEY_NUMPADENTER) return ENTER;
        else if(i == Input.KEY_RCONTROL) return CONTROL;
        else if(i == Input.KEY_NUMPADCOMMA) return COMMA;
        else if(i == Input.KEY_DIVIDE) return DIVIDE;
        else if(i == Input.KEY_SYSRQ) return PRINTSCREEN;
        else if(i == Input.KEY_RMENU) return ALT;
        else if(i == Input.KEY_PAUSE) return PAUSE;
        else if(i == Input.KEY_HOME) return HOME;
        else if(i == Input.KEY_PRIOR) return PAGE_UP;
        else if(i == Input.KEY_UP) return UP;
        else if(i == Input.KEY_LEFT) return LEFT;
        else if(i == Input.KEY_RIGHT) return RIGHT;
        else if(i == Input.KEY_END) return END;
        else if(i == Input.KEY_DOWN) return DOWN;
        else if(i == Input.KEY_NEXT) return PAGE_DOWN;
        else if(i == Input.KEY_INSERT) return INSERT;
        else if(i == Input.KEY_DELETE) return DELETE;
        else if(i == Input.KEY_LWIN) return WINDOWS;
        else if(i == Input.KEY_RWIN) return WINDOWS;
        else return UNDEFINED;
    }*/
}
